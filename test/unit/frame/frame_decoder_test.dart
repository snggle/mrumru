import 'dart:convert';

import 'package:flutter_test/flutter_test.dart';
import 'package:mrumru/mrumru.dart';
import 'package:mrumru/src/frame/frame_decoder.dart';

void main() {
  FrameDecoder actualFrameDecoder = FrameDecoder();

  group('Tests of FrameDecoder process', () {
    test('Should [return FrameCollectionModel] from given binary data', () {
      // Arrange
      actualFrameDecoder.addBinaries(<String>[
        '0000000000000000000000000000000000000000000000110000000000000000000000000000000100000001000000100000001100000100110101101100010110001101001100000100110100010011',
        '0000000000000001000000000010000000110001001100100011001100110100001101010011011000110111001110000011100100111010001110110011110000111101001111100011111101000000010000010100001001000011010001000100010101000110010001110100100001001001010010100100101101001100010011010100111001001111010100001110000001110101',
        '0000000000000010000000000010000001010001010100100101001101010100010101010101011001010111010110000101100101011010010110110101110101011110010111110110000001100001011000100110001101100100011001010110011001100111011010000110100101101010011010110110110001101101011011100110111101110000011100010111111111100101',
        '00000000000000110000000000001101011100100111001101110100011101010111011001110111011110000111100101111010011110110111110001111101011111100100011011000010'
      ]);

      // Act
      FrameCollectionModel actualFrameCollectionModel = actualFrameDecoder.decodedContent;
      String actualMessage = utf8.decode(actualFrameCollectionModel.mergedDataBytes);

      // Assert
      String expectedFrameBinary = '123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~';
      expect(actualMessage, expectedFrameBinary);
    });

    test('Should [return true] if actualFrameDecoder is empty', () {
      // Arrange
      actualFrameDecoder
        ..addBinaries(<String>[
          '0000000000000000000000000000000000000000000000110000000000000000000000000000000100000001000000100000001100000100110101101100010110001101001100000100110100010011',
          '0000000000000001000000000010000000110001001100100011001100110100001101010011011000110111001110000011100100111010001110110011110000111101001111100011111101000000010000010100001001000011010001000100010101000110010001110100100001001001010010100100101101001100010011010100111001001111010100001110000001110101',
          '0000000000000010000000000010000001010001010100100101001101010100010101010101011001010111010110000101100101011010010110110101110101011110010111110110000001100001011000100110001101100100011001010110011001100111011010000110100101101010011010110110110001101101011011100110111101110000011100010111111111100101',
          '00000000000000110000000000001101011100100111001101110100011101010111011001110111011110000111100101111010011110110111110001111101011111100100011011000010'
        ])

        // Act
        ..clear();

      // Assert
      expect(actualFrameDecoder.decodedContent.frames.isEmpty, true);
    });
  });
}
