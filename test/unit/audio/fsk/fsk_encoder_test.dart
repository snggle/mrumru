import 'package:flutter_test/flutter_test.dart';
import 'package:mrumru/src/audio/fsk/fsk_encoder.dart';
import 'package:mrumru/src/models/audio_settings.dart';

void main() {
  group('Test of FskEncoder.encodeBinaryDataToFrequencies()', () {
    String actualBinaryData =


    test('Should return [frequencies] from given binary data for chunksCount (1)', () {
      // Arrange
      AudioSettingsModel actualAudioSettingsModel = AudioSettingsModel.withDefaults().copyWith(chunksCount: 1);
      FskEncoder actualFskEncoder = FskEncoder(actualAudioSettingsModel);

      // Act
      List<int> actualFrequencies = actualFskEncoder.encodeBinaryDataToFrequencies(actualBinaryData);

      // Assert
      // @formatter:off
      List<int> expectedFrequencies = <int>[400, 400, 400, 400, 400, 600, 600, 400, 400, 1000, 400, 600, 400, 1000, 400, 800, 400, 1000, 400, 1000, 400, 1000, 600, 400, 800, 400, 400, 600, 400, 400, 400, 600, 400, 600, 600, 400, 400, 1000, 600, 600, 400, 1000, 600, 800, 400, 1000, 600, 1000, 400, 1000, 800, 400, 1000, 400, 1000, 1000, 400, 400, 400, 800, 400, 600, 600, 400, 400, 1000, 800, 600, 400, 1000, 800, 800, 400, 1000, 800, 1000, 400, 1000, 1000, 400, 1000, 800, 600, 1000, 400, 400, 400, 1000, 400, 600, 600, 400, 400, 1000, 1000, 600, 400, 1000, 1000, 800, 400, 1000, 1000, 1000, 600, 400, 400, 400, 800, 400, 600, 1000, 400, 400, 600, 400, 400, 600, 600, 400, 600, 400, 400, 600, 600, 400, 400, 800, 600, 400, 400, 1000, 600, 400, 600, 400, 1000, 400, 800, 1000, 400, 400, 600, 600, 400, 600, 600, 400, 600, 400, 600, 600, 600, 400, 600, 800, 600, 400, 600, 1000, 600, 400, 800, 400, 800, 1000, 1000, 800, 400, 400, 600, 800, 400, 600, 600, 400, 600, 400, 800, 600, 600, 400, 800, 800, 600, 400, 800, 1000, 600, 400, 1000, 400, 1000, 400, 600, 1000, 400, 400, 600, 1000, 400, 600, 600, 400, 600, 400, 1000, 600, 600, 400, 1000, 800, 600, 400, 1000, 1000, 600, 600, 400, 400, 800, 400, 400, 1000, 400, 400, 800, 400, 400, 600, 600, 400, 600, 600, 400, 600, 600, 600, 400, 800, 600, 600, 400, 1000, 600, 600, 600, 400, 1000, 800, 400, 400, 400, 400, 800, 600, 400, 600, 600, 400, 600, 600, 600, 600, 600, 600, 600, 800, 600, 600, 600, 1000, 600, 600, 800, 400, 1000, 600, 800, 1000, 400, 400, 800, 800, 400, 600, 600, 400, 600, 600, 800, 600, 600, 600, 800, 800, 600, 600, 800, 1000, 600, 600, 1000, 600, 1000, 600, 400, 600, 400, 400, 800, 1000, 400, 600, 600, 400, 600, 600, 1000, 800, 600, 600, 1000, 1000, 600, 800, 400, 400, 600, 800, 400, 600, 1000, 800, 800, 600, 400, 400, 1000, 400, 400, 600, 600, 400, 600, 800, 400, 800, 600, 800, 400, 1000, 600, 800, 600, 400, 600, 800, 600, 600, 1000, 800, 400, 400, 400, 400, 1000, 600, 400, 600, 600, 400, 600, 800, 600, 800, 600, 800, 600, 1000, 600, 800, 800, 400, 600, 800, 800, 600, 800, 800, 1000, 800, 400, 400, 1000, 800, 400, 600, 600, 400, 600, 800, 800, 800, 600, 800, 800, 1000, 600, 800, 1000, 400, 600, 800, 1000, 600, 800, 600, 1000, 1000, 400, 400, 1000, 1000, 400, 600, 600, 400, 600, 800, 1000, 800, 600, 800, 1000, 1000, 600, 1000, 400, 400, 600, 1000, 400, 600, 600, 800, 600, 400, 400, 600, 400, 400, 400, 600, 600, 400, 600, 1000, 400, 800, 600, 1000, 400, 1000, 600, 1000, 600, 400, 600, 1000, 600, 600, 1000, 1000, 1000, 1000, 400, 600, 400, 600, 400, 600, 600, 400, 600, 1000, 600, 800, 600, 1000, 600, 1000, 600, 1000, 800, 400, 600, 1000, 800, 600, 800, 400, 800, 1000, 400, 600, 400, 800, 400, 600, 600, 400, 600, 1000, 800, 800, 600, 1000, 800, 1000, 600, 1000, 1000, 400, 600, 1000, 1000, 600, 1000, 600, 1000, 600, 400, 600, 400, 1000, 400, 600, 600, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 600, 1000, 1000, 800, 800, 600, 800, 600];
      // @formatter:on
      expect(actualFrequencies, expectedFrequencies);
    });

    test('Should return [frequencies] from given binary data for chunksCount (2)', () {
      // Arrange
      AudioSettingsModel actualAudioSettingsModel = AudioSettingsModel.withDefaults().copyWith(chunksCount: 2);
      FskEncoder actualFskEncoder = FskEncoder(actualAudioSettingsModel);

      // Act
      List<int> actualFrequencies = actualFskEncoder.encodeBinaryDataToFrequencies(actualBinaryData);

      // Assert
      // @formatter:off
      List<int> expectedFrequencies = <int>[400, 400, 400, 400, 400, 600, 600, 400, 400, 1000, 400, 600, 400, 1000, 400, 800, 400, 1000, 400, 1000, 400, 1000, 600, 400, 800, 400, 400, 600, 400, 400, 400, 600, 400, 600, 600, 400, 400, 1000, 600, 600, 400, 1000, 600, 800, 400, 1000, 600, 1000, 400, 1000, 800, 400, 1000, 400, 1000, 1000, 400, 400, 400, 800, 400, 600, 600, 400, 400, 1000, 800, 600, 400, 1000, 800, 800, 400, 1000, 800, 1000, 400, 1000, 1000, 400, 1000, 800, 600, 1000, 400, 400, 400, 1000, 400, 600, 600, 400, 400, 1000, 1000, 600, 400, 1000, 1000, 800, 400, 1000, 1000, 1000, 600, 400, 400, 400, 800, 400, 600, 1000, 400, 400, 600, 400, 400, 600, 600, 400, 600, 400, 400, 600, 600, 400, 400, 800, 600, 400, 400, 1000, 600, 400, 600, 400, 1000, 400, 800, 1000, 400, 400, 600, 600, 400, 600, 600, 400, 600, 400, 600, 600, 600, 400, 600, 800, 600, 400, 600, 1000, 600, 400, 800, 400, 800, 1000, 1000, 800, 400, 400, 600, 800, 400, 600, 600, 400, 600, 400, 800, 600, 600, 400, 800, 800, 600, 400, 800, 1000, 600, 400, 1000, 400, 1000, 400, 600, 1000, 400, 400, 600, 1000, 400, 600, 600, 400, 600, 400, 1000, 600, 600, 400, 1000, 800, 600, 400, 1000, 1000, 600, 600, 400, 400, 800, 400, 400, 1000, 400, 400, 800, 400, 400, 600, 600, 400, 600, 600, 400, 600, 600, 600, 400, 800, 600, 600, 400, 1000, 600, 600, 600, 400, 1000, 800, 400, 400, 400, 400, 800, 600, 400, 600, 600, 400, 600, 600, 600, 600, 600, 600, 600, 800, 600, 600, 600, 1000, 600, 600, 800, 400, 1000, 600, 800, 1000, 1600, 1600, 2000, 2000, 1600, 1800, 1800, 1600, 1800, 1800, 2000, 1800, 1800, 1800, 2000, 2000, 1800, 1800, 2000, 2200, 1800, 1800, 2200, 1800, 2200, 1800, 1600, 1800, 1600, 1600, 2000, 2200, 1600, 1800, 1800, 1600, 1800, 1800, 2200, 2000, 1800, 1800, 2200, 2200, 1800, 2000, 1600, 1600, 1800, 2000, 1600, 1800, 2200, 2000, 2000, 1800, 1600, 1600, 2200, 1600, 1600, 1800, 1800, 1600, 1800, 2000, 1600, 2000, 1800, 2000, 1600, 2200, 1800, 2000, 1800, 1600, 1800, 2000, 1800, 1800, 2200, 2000, 1600, 1600, 1600, 1600, 2200, 1800, 1600, 1800, 1800, 1600, 1800, 2000, 1800, 2000, 1800, 2000, 1800, 2200, 1800, 2000, 2000, 1600, 1800, 2000, 2000, 1800, 2000, 2000, 2200, 2000, 1600, 1600, 2200, 2000, 1600, 1800, 1800, 1600, 1800, 2000, 2000, 2000, 1800, 2000, 2000, 2200, 1800, 2000, 2200, 1600, 1800, 2000, 2200, 1800, 2000, 1800, 2200, 2200, 1600, 1600, 2200, 2200, 1600, 1800, 1800, 1600, 1800, 2000, 2200, 2000, 1800, 2000, 2200, 2200, 1800, 2200, 1600, 1600, 1800, 2200, 1600, 1800, 1800, 2000, 1800, 1600, 1600, 1800, 1600, 1600, 1600, 1800, 1800, 1600, 1800, 2200, 1600, 2000, 1800, 2200, 1600, 2200, 1800, 2200, 1800, 1600, 1800, 2200, 1800, 1800, 2200, 2200, 2200, 2200, 1600, 1800, 1600, 1800, 1600, 1800, 1800, 1600, 1800, 2200, 1800, 2000, 1800, 2200, 1800, 2200, 1800, 2200, 2000, 1600, 1800, 2200, 2000, 1800, 2000, 1600, 2000, 2200, 1600, 1800, 1600, 2000, 1600, 1800, 1800, 1600, 1800, 2200, 2000, 2000, 1800, 2200, 2000, 2200, 1800, 2200, 2200, 1600, 1800, 2200, 2200, 1800, 2200, 1800, 2200, 1800, 1600, 1800, 1600, 2200, 1600, 1800, 1800, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1800, 2200, 2200, 2000, 2000, 1800, 2000, 1800];
      // @formatter:on
      expect(actualFrequencies, expectedFrequencies);
    });

    test('Should return [frequencies] from given binary data for chunksCount (4)', () {
      // Arrange
      AudioSettingsModel actualAudioSettingsModel = AudioSettingsModel.withDefaults().copyWith(chunksCount: 4);
      FskEncoder actualFskEncoder = FskEncoder(actualAudioSettingsModel);

      // Act
      List<int> actualFrequencies = actualFskEncoder.encodeBinaryDataToFrequencies(actualBinaryData);

      // Assert
      // @formatter:off
      List<int> expectedFrequencies = <int>[400, 400, 400, 400, 400, 600, 600, 400, 400, 1000, 400, 600, 400, 1000, 400, 800, 400, 1000, 400, 1000, 400, 1000, 600, 400, 800, 400, 400, 600, 400, 400, 400, 600, 400, 600, 600, 400, 400, 1000, 600, 600, 400, 1000, 600, 800, 400, 1000, 600, 1000, 400, 1000, 800, 400, 1000, 400, 1000, 1000, 400, 400, 400, 800, 400, 600, 600, 400, 400, 1000, 800, 600, 400, 1000, 800, 800, 400, 1000, 800, 1000, 400, 1000, 1000, 400, 1000, 800, 600, 1000, 400, 400, 400, 1000, 400, 600, 600, 400, 400, 1000, 1000, 600, 400, 1000, 1000, 800, 400, 1000, 1000, 1000, 600, 400, 400, 400, 800, 400, 600, 1000, 400, 400, 600, 400, 400, 600, 600, 400, 600, 400, 400, 600, 600, 400, 400, 800, 600, 400, 400, 1000, 600, 400, 600, 400, 1000, 400, 800, 1000, 1600, 1600, 1800, 1800, 1600, 1800, 1800, 1600, 1800, 1600, 1800, 1800, 1800, 1600, 1800, 2000, 1800, 1600, 1800, 2200, 1800, 1600, 2000, 1600, 2000, 2200, 2200, 2000, 1600, 1600, 1800, 2000, 1600, 1800, 1800, 1600, 1800, 1600, 2000, 1800, 1800, 1600, 2000, 2000, 1800, 1600, 2000, 2200, 1800, 1600, 2200, 1600, 2200, 1600, 1800, 2200, 1600, 1600, 1800, 2200, 1600, 1800, 1800, 1600, 1800, 1600, 2200, 1800, 1800, 1600, 2200, 2000, 1800, 1600, 2200, 2200, 1800, 1800, 1600, 1600, 2000, 1600, 1600, 2200, 1600, 1600, 2000, 1600, 1600, 1800, 1800, 1600, 1800, 1800, 1600, 1800, 1800, 1800, 1600, 2000, 1800, 1800, 1600, 2200, 1800, 1800, 1800, 1600, 2200, 2000, 1600, 1600, 1600, 1600, 2000, 1800, 1600, 1800, 1800, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 2000, 1800, 1800, 1800, 2200, 1800, 1800, 2000, 1600, 2200, 1800, 2000, 2200, 2800, 2800, 3200, 3200, 2800, 3000, 3000, 2800, 3000, 3000, 3200, 3000, 3000, 3000, 3200, 3200, 3000, 3000, 3200, 3400, 3000, 3000, 3400, 3000, 3400, 3000, 2800, 3000, 2800, 2800, 3200, 3400, 2800, 3000, 3000, 2800, 3000, 3000, 3400, 3200, 3000, 3000, 3400, 3400, 3000, 3200, 2800, 2800, 3000, 3200, 2800, 3000, 3400, 3200, 3200, 3000, 2800, 2800, 3400, 2800, 2800, 3000, 3000, 2800, 3000, 3200, 2800, 3200, 3000, 3200, 2800, 3400, 3000, 3200, 3000, 2800, 3000, 3200, 3000, 3000, 3400, 3200, 2800, 2800, 2800, 2800, 3400, 3000, 2800, 3000, 3000, 2800, 3000, 3200, 3000, 3200, 3000, 3200, 3000, 3400, 3000, 3200, 3200, 2800, 3000, 3200, 3200, 3000, 3200, 3200, 3400, 3200, 2800, 2800, 3400, 3200, 2800, 3000, 3000, 2800, 3000, 3200, 3200, 3200, 3000, 3200, 3200, 3400, 3000, 3200, 3400, 2800, 3000, 3200, 3400, 3000, 3200, 3000, 3400, 3400, 4000, 4000, 4600, 4600, 4000, 4200, 4200, 4000, 4200, 4400, 4600, 4400, 4200, 4400, 4600, 4600, 4200, 4600, 4000, 4000, 4200, 4600, 4000, 4200, 4200, 4400, 4200, 4000, 4000, 4200, 4000, 4000, 4000, 4200, 4200, 4000, 4200, 4600, 4000, 4400, 4200, 4600, 4000, 4600, 4200, 4600, 4200, 4000, 4200, 4600, 4200, 4200, 4600, 4600, 4600, 4600, 4000, 4200, 4000, 4200, 4000, 4200, 4200, 4000, 4200, 4600, 4200, 4400, 4200, 4600, 4200, 4600, 4200, 4600, 4400, 4000, 4200, 4600, 4400, 4200, 4400, 4000, 4400, 4600, 4000, 4200, 4000, 4400, 4000, 4200, 4200, 4000, 4200, 4600, 4400, 4400, 4200, 4600, 4400, 4600, 4200, 4600, 4600, 4000, 4200, 4600, 4600, 4200, 4600, 4200, 4600, 4200, 4000, 4200, 4000, 4600, 4000, 4200, 4200, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4200, 4600, 4600, 4400, 4400, 4200, 4400, 4200];
      // @formatter:on
      expect(actualFrequencies, expectedFrequencies);
    });

    test('Should return [frequencies] from given binary data for chunksCount (8)', () {
      // Arrange
      AudioSettingsModel actualAudioSettingsModel = AudioSettingsModel.withDefaults().copyWith(chunksCount: 8);
      FskEncoder actualFskEncoder = FskEncoder(actualAudioSettingsModel);

      // Act
      List<int> actualFrequencies = actualFskEncoder.encodeBinaryDataToFrequencies(actualBinaryData);

      // Assert
      // @formatter:off
      List<int> expectedFrequencies = <int>[400, 400, 400, 400, 400, 600, 600, 400, 400, 1000, 400, 600, 400, 1000, 400, 800, 400, 1000, 400, 1000, 400, 1000, 600, 400, 800, 400, 400, 600, 400, 400, 400, 600, 400, 600, 600, 400, 400, 1000, 600, 600, 400, 1000, 600, 800, 400, 1000, 600, 1000, 400, 1000, 800, 400, 1000, 400, 1000, 1000, 400, 400, 400, 800, 400, 600, 600, 400, 400, 1000, 800, 600, 400, 1000, 2000, 2000, 1600, 2200, 2000, 2200, 1600, 2200, 2200, 1600, 2200, 2000, 1800, 2200, 1600, 1600, 1600, 2200, 1600, 1800, 1800, 1600, 1600, 2200, 2200, 1800, 1600, 2200, 2200, 2000, 1600, 2200, 2200, 2200, 1800, 1600, 1600, 1600, 2000, 1600, 1800, 2200, 1600, 1600, 1800, 1600, 1600, 1800, 1800, 1600, 1800, 1600, 1600, 1800, 1800, 1600, 1600, 2000, 1800, 1600, 1600, 2200, 1800, 1600, 1800, 1600, 2200, 1600, 2000, 2200, 2800, 2800, 3000, 3000, 2800, 3000, 3000, 2800, 3000, 2800, 3000, 3000, 3000, 2800, 3000, 3200, 3000, 2800, 3000, 3400, 3000, 2800, 3200, 2800, 3200, 3400, 3400, 3200, 2800, 2800, 3000, 3200, 2800, 3000, 3000, 2800, 3000, 2800, 3200, 3000, 3000, 2800, 3200, 3200, 3000, 2800, 3200, 3400, 3000, 2800, 3400, 2800, 3400, 2800, 3000, 3400, 2800, 2800, 3000, 3400, 2800, 3000, 3000, 2800, 3000, 2800, 3400, 3000, 3000, 2800, 4600, 4400, 4200, 4000, 4600, 4600, 4200, 4200, 4000, 4000, 4400, 4000, 4000, 4600, 4000, 4000, 4400, 4000, 4000, 4200, 4200, 4000, 4200, 4200, 4000, 4200, 4200, 4200, 4000, 4400, 4200, 4200, 4000, 4600, 4200, 4200, 4200, 4000, 4600, 4400, 4000, 4000, 4000, 4000, 4400, 4200, 4000, 4200, 4200, 4000, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4400, 4200, 4200, 4200, 4600, 4200, 4200, 4400, 4000, 4600, 4200, 4400, 4600, 5200, 5200, 5600, 5600, 5200, 5400, 5400, 5200, 5400, 5400, 5600, 5400, 5400, 5400, 5600, 5600, 5400, 5400, 5600, 5800, 5400, 5400, 5800, 5400, 5800, 5400, 5200, 5400, 5200, 5200, 5600, 5800, 5200, 5400, 5400, 5200, 5400, 5400, 5800, 5600, 5400, 5400, 5800, 5800, 5400, 5600, 5200, 5200, 5400, 5600, 5200, 5400, 5800, 5600, 5600, 5400, 5200, 5200, 5800, 5200, 5200, 5400, 5400, 5200, 5400, 5600, 5200, 5600, 5400, 5600, 6400, 7000, 6600, 6800, 6600, 6400, 6600, 6800, 6600, 6600, 7000, 6800, 6400, 6400, 6400, 6400, 7000, 6600, 6400, 6600, 6600, 6400, 6600, 6800, 6600, 6800, 6600, 6800, 6600, 7000, 6600, 6800, 6800, 6400, 6600, 6800, 6800, 6600, 6800, 6800, 7000, 6800, 6400, 6400, 7000, 6800, 6400, 6600, 6600, 6400, 6600, 6800, 6800, 6800, 6600, 6800, 6800, 7000, 6600, 6800, 7000, 6400, 6600, 6800, 7000, 6600, 6800, 6600, 7000, 7000, 7600, 7600, 8200, 8200, 7600, 7800, 7800, 7600, 7800, 8000, 8200, 8000, 7800, 8000, 8200, 8200, 7800, 8200, 7600, 7600, 7800, 8200, 7600, 7800, 7800, 8000, 7800, 7600, 7600, 7800, 7600, 7600, 7600, 7800, 7800, 7600, 7800, 8200, 7600, 8000, 7800, 8200, 7600, 8200, 7800, 8200, 7800, 7600, 7800, 8200, 7800, 7800, 8200, 8200, 8200, 8200, 7600, 7800, 7600, 7800, 7600, 7800, 7800, 7600, 7800, 8200, 7800, 8000, 7800, 8200, 9000, 9400, 9000, 9400, 9200, 8800, 9000, 9400, 9200, 9000, 9200, 8800, 9200, 9400, 8800, 9000, 8800, 9200, 8800, 9000, 9000, 8800, 9000, 9400, 9200, 9200, 9000, 9400, 9200, 9400, 9000, 9400, 9400, 8800, 9000, 9400, 9400, 9000, 9400, 9000, 9400, 9000, 8800, 9000, 8800, 9400, 8800, 9000, 9000, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 9000, 9400, 9400, 9200, 9200, 9000, 9200, 9000];
      // @formatter:on
      expect(actualFrequencies, expectedFrequencies);
    });
  });
}